============================================================
Graphs 
============================================================

Construction
===========================================================
1:GraphBuildingInC.cpp - EASY. Adjacency list building. Undirected graph so link from src to dest and vice versa
2:GraphBuildingInCPlusPlus.cpp - EASY. Directed graph.

Traversals
=============================================================
3:BreadthFirstTraversal.cpp - MODERATE. Remember to use queue as a data structure to travel different nodes for the graph. Iterative procedure.
4:DepthFirstTraversal.cpp - MODERATE. Iterative - Use stack. Recursive too.

Operations
=============================================================
5:DetectCycleDirectedGraph.cpp - DIFFICULT. Use recursive stack along with visited nodes array.
6:DetectCycleUnDirectedGraph.cpp - DIFFICULT. Same as directed with just checking with parent node instead of recursive stack.
12:TopologicalSorting.cpp - DIFFICULT. Use DFS technique along with stack. Top of stack would be element with most outgoing edges.
20:FordFulkersonEdmondsKarpAlgo.cpp
23:FleuryAlgoPrintingEuleriantour.cpp

FindSearchCheck
==============================================================
7:FindIfPathBet2Vertices.cpp - DIFFICULT. Use BFS to search all paths.
8:FindNoIslands.cpp - DIFFICULT. Use DFS and strongly connected components.
9:FindAndColorCodeNoIslands.cpp - DIFFICULT. Use DFS and strongly connected components. Same as above. add coloring along with finding all islands.
10:CheckIfGraphIsBipartite.cpp
11:TransitiveClosure.cpp
13:ShortestPathDAG.cpp
14:StronglyConnectedComponentsKosaraju.cpp
15:ArticulationPoints.cpp
16:BridgesInGraph.cpp
17:BiconnectedGraph.cpp
18:ConnectivityDirectedGraph.cpp
19:EuclerianPathAndCircuitUndirectedGraph.cpp
21:MinimumCutInFlowNetwork.cpp
22:MaxNoEdgeDisjointPathsBetweenTwoVertices.cpp




